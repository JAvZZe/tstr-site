---
import { supabase } from '../lib/supabase'

// Fetch all active listings
const { data: listings, error } = await supabase
  .from('listings')
  .select('*')
  .eq('status', 'active')
  .order('created_at', { ascending: false })

// Extract unique countries
const extractCountry = (address) => {
  if (!address) return null
  const parts = address.split(',').map(p => p.trim()).filter(p => p.length > 0)
  if (parts.length === 0) return null
  let country = parts[parts.length - 1]
  if (/^\d+$/.test(country) && parts.length > 1) {
    country = parts[parts.length - 2]
  }
  country = country.replace(/\s+\d{4,}$/g, '').trim()
  return country
}

// Extract unique cities (second-to-last or third-to-last part)
const extractCity = (address) => {
  if (!address) return null
  const parts = address.split(',').map(p => p.trim()).filter(p => p.length > 0)
  if (parts.length < 2) return parts[0]
  // Typically: Street, City, State/Postal, Country
  // So city is often 2nd or 3rd from end
  if (parts.length >= 3) {
    const potentialCity = parts[parts.length - 3]
    // Skip if it looks like postal code
    if (!/^\d+$/.test(potentialCity) && !/^[A-Z0-9\s-]{2,10}$/.test(potentialCity)) {
      return potentialCity
    }
  }
  return parts[parts.length - 2]
}

const countries = [...new Set(listings?.map(l => extractCountry(l.address))).values()].filter(Boolean).sort()
const cities = [...new Set(listings?.map(l => extractCity(l.address))).values()].filter(Boolean).sort()
const categories = [...new Set(listings?.map(l => l.category)).values()].filter(Boolean).sort()

const totalListings = listings?.length || 0
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Browse Testing Laboratories | TSTR Hub</title>
  <meta name="description" content="Browse {totalListings} verified testing service providers by country, city, and specialty. Oil & Gas, Pharmaceutical, Environmental testing labs worldwide.">
  <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7003918988204966"
     crossorigin="anonymous"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      line-height: 1.6;
      color: #333;
      background: #f5f5f5;
    }

    header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 2rem;
      text-align: center;
    }

    header h1 {
      font-size: 2.5rem;
      margin-bottom: 0.5rem;
      font-weight: 700;
    }

    .breadcrumb {
      margin-top: 1rem;
      opacity: 0.9;
    }

    .breadcrumb a {
      color: white;
      text-decoration: none;
    }

    .breadcrumb a:hover {
      text-decoration: underline;
    }

    main {
      max-width: 1200px;
      margin: 0 auto;
      padding: 3rem 2rem;
    }

    .filters {
      background: white;
      padding: 2rem;
      border-radius: 12px;
      margin-bottom: 2rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
    }

    .filter-group {
      display: flex;
      flex-direction: column;
    }

    .filter-group label {
      font-weight: 600;
      color: #667eea;
      margin-bottom: 0.5rem;
    }

    .filter-group select {
      padding: 0.75rem;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      font-size: 1rem;
      transition: border-color 0.3s ease;
    }

    .filter-group select:focus {
      outline: none;
      border-color: #667eea;
    }

    .results-count {
      background: white;
      padding: 1rem 2rem;
      border-radius: 8px;
      margin-bottom: 1.5rem;
      text-align: center;
      font-weight: 600;
      color: #667eea;
    }

    .listings-grid {
      display: grid;
      gap: 1.5rem;
    }

    .listing-card {
      background: white;
      border: 2px solid #e0e0e0;
      border-radius: 12px;
      padding: 2rem;
      transition: all 0.3s ease;
    }

    .listing-card:hover {
      border-color: #667eea;
      box-shadow: 0 4px 12px rgba(102,126,234,0.2);
      transform: translateY(-2px);
    }

    .listing-header {
      display: flex;
      justify-content: space-between;
      align-items: start;
      margin-bottom: 1rem;
    }

    .listing-title {
      color: #667eea;
      font-size: 1.5rem;
      margin-bottom: 0.5rem;
      font-weight: 600;
    }

    .category-badge {
      background: #f0f0f0;
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.85rem;
      color: #555;
      display: inline-block;
    }

    .verified-badge {
      background: #4caf50;
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 12px;
      font-size: 0.85rem;
      font-weight: 600;
    }

    .listing-description {
      color: #666;
      margin-bottom: 1rem;
      line-height: 1.6;
    }

    .listing-details {
      display: grid;
      gap: 0.5rem;
      color: #555;
      font-size: 0.95rem;
    }

    .detail-item {
      display: flex;
      gap: 0.5rem;
    }

    .detail-icon {
      color: #667eea;
      font-weight: 600;
    }

    .detail-item a {
      color: #667eea;
      text-decoration: none;
    }

    .detail-item a:hover {
      text-decoration: underline;
    }

    .no-results {
      background: white;
      padding: 3rem;
      border-radius: 12px;
      text-align: center;
      color: #666;
    }

    footer {
      background: #333;
      color: white;
      text-align: center;
      padding: 2rem;
      margin-top: 3rem;
    }

    footer a {
      color: white;
      text-decoration: none;
      margin: 0 1rem;
    }

    footer a:hover {
      text-decoration: underline;
    }

    .hidden {
      display: none !important;
    }
  </style>
</head>
<body>
  <header>
    <h1>Browse Testing Laboratories</h1>
    <p class="breadcrumb">
      <a href="/">Home</a> / Browse All Listings
    </p>
  </header>

  <main>
    <div class="filters">
      <div class="filter-group">
        <label for="country-filter">Filter by Country</label>
        <select id="country-filter">
          <option value="">All Countries</option>
          {countries.map(country => (
            <option value={country}>{country}</option>
          ))}
        </select>
      </div>

      <div class="filter-group">
        <label for="city-filter">Filter by City</label>
        <select id="city-filter">
          <option value="">All Cities</option>
          {cities.map(city => (
            <option value={city}>{city}</option>
          ))}
        </select>
      </div>

      <div class="filter-group">
        <label for="category-filter">Filter by Category</label>
        <select id="category-filter">
          <option value="">All Categories</option>
          {categories.map(category => (
            <option value={category}>{category}</option>
          ))}
        </select>
      </div>
    </div>

    <div class="results-count" id="results-count">
      Showing {totalListings} listings
    </div>

    <div class="listings-grid" id="listings-grid">
      {listings && listings.map((lab) => {
        const country = extractCountry(lab.address)
        const city = extractCity(lab.address)

        return (
          <div class="listing-card" data-country={country} data-city={city} data-category={lab.category}>
            <div class="listing-header">
              <div>
                <h3 class="listing-title">{lab.business_name}</h3>
                {lab.category && <span class="category-badge">{lab.category}</span>}
              </div>
              {lab.website_verified && (
                <span class="verified-badge">‚úì Verified</span>
              )}
            </div>

            {lab.description && (
              <p class="listing-description">{lab.description}</p>
            )}

            <div class="listing-details">
              {lab.address && (
                <div class="detail-item">
                  <span class="detail-icon">üìç</span>
                  <span>{lab.address}</span>
                </div>
              )}
              {lab.phone && (
                <div class="detail-item">
                  <span class="detail-icon">üìû</span>
                  <span>{lab.phone}</span>
                </div>
              )}
              {lab.email && (
                <div class="detail-item">
                  <span class="detail-icon">‚úâÔ∏è</span>
                  <a href={`mailto:${lab.email}`}>{lab.email}</a>
                </div>
              )}
              {lab.website && (
                <div class="detail-item">
                  <span class="detail-icon">üåê</span>
                  <a href={lab.website} target="_blank" rel="noopener noreferrer">{lab.website}</a>
                </div>
              )}
            </div>
          </div>
        )
      })}
    </div>

    <div class="no-results hidden" id="no-results">
      <h2>No listings found</h2>
      <p>Try adjusting your filters to see more results.</p>
    </div>
  </main>

  <footer>
    <p>&copy; 2025 TSTR Hub - Specialist Testing Services, Products and Solutions Directory</p>
    <p style="margin-top: 1rem;">
      <a href="/">Home</a>
      <a href="/privacy">Privacy Policy</a>
      <a href="/submit">List Your Company</a>
    </p>
  </footer>

  <script>
    // Filter functionality
    const countryFilter = document.getElementById('country-filter')
    const cityFilter = document.getElementById('city-filter')
    const categoryFilter = document.getElementById('category-filter')
    const listingsGrid = document.getElementById('listings-grid')
    const resultsCount = document.getElementById('results-count')
    const noResults = document.getElementById('no-results')
    const listings = document.querySelectorAll('.listing-card')

    function filterListings() {
      const selectedCountry = countryFilter.value.toLowerCase()
      const selectedCity = cityFilter.value.toLowerCase()
      const selectedCategory = categoryFilter.value.toLowerCase()

      let visibleCount = 0

      listings.forEach(listing => {
        const country = (listing.dataset.country || '').toLowerCase()
        const city = (listing.dataset.city || '').toLowerCase()
        const category = (listing.dataset.category || '').toLowerCase()

        const matchesCountry = !selectedCountry || country === selectedCountry
        const matchesCity = !selectedCity || city === selectedCity
        const matchesCategory = !selectedCategory || category === selectedCategory

        if (matchesCountry && matchesCity && matchesCategory) {
          listing.classList.remove('hidden')
          visibleCount++
        } else {
          listing.classList.add('hidden')
        }
      })

      // Update results count
      resultsCount.textContent = `Showing ${visibleCount} listing${visibleCount !== 1 ? 's' : ''}`

      // Show/hide no results message
      if (visibleCount === 0) {
        listingsGrid.classList.add('hidden')
        noResults.classList.remove('hidden')
      } else {
        listingsGrid.classList.remove('hidden')
        noResults.classList.add('hidden')
      }
    }

    // Add event listeners
    countryFilter.addEventListener('change', filterListings)
    cityFilter.addEventListener('change', filterListings)
    categoryFilter.addEventListener('change', filterListings)

    // Check URL parameters for pre-filtering
    const urlParams = new URLSearchParams(window.location.search)
    if (urlParams.has('country')) {
      countryFilter.value = urlParams.get('country')
      filterListings()
    }
    if (urlParams.has('city')) {
      cityFilter.value = urlParams.get('city')
      filterListings()
    }
    if (urlParams.has('category')) {
      categoryFilter.value = urlParams.get('category')
      filterListings()
    }
  </script>
</body>
</html>
